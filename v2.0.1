#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <WebSocketsClient.h> //  https://github.com/kakopappa/sinric/wiki/How-to-add-dependency-libraries 
#include <ArduinoJson.h> // https://github.com/kakopappa/sinric/wiki/How-to-add-dependency-libraries

ESP8266WiFiMulti WiFiMulti;
WebSocketsClient webSocket;
WiFiClient client;

#define MyApiKey "2802a739-567f-4946-81df-e51fbdda34a4" // TODO: Change to your sinric API Key. Your API Key is displayed on sinric.com dashboard
#define MySSID "anurag" // TODO: Change to your Wifi network SSID
#define MyWifiPassword "1199227465" // TODO: Change to your Wifi network password
#define dev_id "5f6b1180d1e9084a7085cbe0"
#define dev_rb "5f7374213af7bf2a9c7439b9"

#define API_ENDPOINT "http://sinric.com"
#define HEARTBEAT_INTERVAL 300000 // 5 Minutes 

uint64_t heartbeatTimestamp = 0;
bool isConnected = false;
const int blue=D7;
const int red=D4;
const int green=D0;
float intense=100;
float intense_rainbow=100;
int flag=1;
int digit=0;
float r_inc;
float o_hall=100;
int pixel_sts=0;

float cr_=0,cg_=0,cb_=0;


void rainbow(float i,float j,float k);
void colors(float cr,float cg,float cb);
void colors_rainbow(float cr,float cg,float cb,float intense_rainbow_);
void colorsb(int flag, float intense_);
void brightness_trans(float overhall);
void color_trans(int dummy,int F,float intense_);


void turnOn(String deviceId) {
  if (deviceId == dev_id) // Device ID of first device
  {

    if(digit==1)
    {
    turnOff_rb(dev_rb);
    }
    digit=0;
    for (float i=0;i<=intense;i++)
    {
      delay(3);
      colorsb(flag,i);
      
    }
    Serial.print("pixel on\n");
  
  } 
  
}

void turnOff(String deviceId) {
   if (deviceId == dev_id) // Device ID of first device
   {  
    for (float i=intense;i>=0;i--)
    {
      
      colorsb(flag,i);
      delay(3);
    }
    Serial.print("pixel off\n"); 
     
   }
}
void turnOn_rb(String deviceId) {
  if (deviceId == dev_rb) // Device ID of first device
  {  

   for (float i=0;i<=intense_rainbow;i++)
    {
      colorsb(1,i);
      delay(8);
    }
    digit=1;
    delay(8);
        Serial.print("rainbow on\n");
  } 
  
}

void turnOff_rb(String deviceId) {
   if (deviceId == dev_rb) // Device ID of first device
   {  
      for(float i=intense_rainbow;i>=0;i=i-0.1)
      {
        colors(cr_,cg_,cb_,i);
        delayMicroseconds(500);
      }
      digit=0;
       Serial.print("rainbow off\n");
   }
  

}

void brightness_trans(float overhall)
{
  //brightness increased
  if(overhall<intense)
  {
    for (float i=overhall;i<=intense;i++)
    {
      colorsb(flag,i);
      delay(5);
    }
    
    
  }
  else if(overhall>intense)
  {
    for (float i=overhall;i>=intense;i--)
    {
      
      colorsb(flag,i);
      delay(5);
    }
    
  }
  //pixel_sts=1;
  
}
void color_trans(int dummy,int F,float intense_)//,float cr,float cg,float cb)
{
  //reducing dummy color  //increasing flag color
  if(digit==0)
  for(float j=intense_;j>=0;j--)
  {
    colorsb(dummy,j);
    delay(3);
  }
  else if(digit==1)
  {
   turnOff_rb(dev_rb) ;
  }
  for (float i=0;i<=intense_;i++)
  {
    colorsb(F,i);
    delay(3);
  }
  pixel_sts=1;
}


void colors(float cr,float cg,float cb,float intense_)
{
            float cr_val = map(cr*(intense_/100), 0, 255, 1023,0);
            float cg_val = map(cg*(intense_/100), 0, 255, 1023,0);
            float cb_val = map(cb*(intense_/100), 0, 255, 1023,0);
            analogWrite(red,cr_val);
            analogWrite(green,cg_val);
            analogWrite(blue,cb_val);
}
void colors_rainbow(float cr,float cg,float cb,float i_rb)
{
            
            if(o_hall>i_rb)
            {
              float cr_val = map(cr*(o_hall/100), 0, 255, 1023,0);
              float cg_val = map(cg*(o_hall/100), 0, 255, 1023,0);
              float cb_val = map(cb*(o_hall/100), 0, 255, 1023,0);
              o_hall=o_hall-0.005;
              analogWrite(red,cr_val);
              analogWrite(green,cg_val);
              analogWrite(blue,cb_val);
            }
            else if(o_hall<i_rb)
            {
              float cr_val = map(cr*(o_hall/100), 0, 255, 1023,0);
              float cg_val = map(cg*(o_hall/100), 0, 255, 1023,0);
              float cb_val = map(cb*(o_hall/100), 0, 255, 1023,0);
              o_hall=o_hall+0.005;
              analogWrite(red,cr_val);
              analogWrite(green,cg_val);
              analogWrite(blue,cb_val);
            }
            else if(o_hall==i_rb)
            {
              float cr_val = map(cr*(i_rb/100), 0, 255, 1023,0);
              float cg_val = map(cg*(i_rb/100), 0, 255, 1023,0);
              float cb_val = map(cb*(i_rb/100), 0, 255, 1023,0);
              //overhall=overhall+1;
              analogWrite(red,cr_val);
              analogWrite(green,cg_val);
              analogWrite(blue,cb_val);
              
            }
}
void colorsb(int flag, float intense_)
{

            
            
            if (flag==1)
            {              
              colors(255,0,0,intense_);
            }
            else if (flag==2)
            {              
              colors(0,255,0,intense_);
            }
            else if (flag==3)
            {              
              colors(0,0,255,intense_);
            }
            else if (flag==4)
            {              
              colors(255,55,0,intense_);
            }
            else if (flag==6)
            {              
              colors(255,108,35,intense_);
            }
            else if (flag==7)
            {              
              colors(50,213,245,intense_);
            }
            else if (flag==8)
            {              
              colors(181,255,255,intense_); 
            }
            else if (flag==9)
            {              
              colors(0,162,238,intense_);
            }
            else if (flag==10)
            {              
              colors(200,84,250,intense_);
            }
            else if (flag==11)
            {              
              colors(255,74,80,intense_);
            }
            else if (flag==12)
            {              
              colors(234,10,142,intense_);
            }

            // white shades 
            
            if(flag==17)//warm
          {
            
            colors(255,147,41,intense_);
            
          }
          else if(flag==16)//soft
          {
            
           colors(255,177,71,intense_);
            
          }
          else if(flag==15)//white
          {
            
            colors(255,200,220,intense_);
            
          }
          else if(flag==14)//day
          {
            
            
            colors(255,220,255,intense_);
            
          }
          else if(flag==13)//cool
          {
           
            colors(255,255,255,intense_);
            
          }
          
  
}




void webSocketEvent(WStype_t type, uint8_t * payload, size_t length) {
  switch(type) {
    case WStype_DISCONNECTED:
      isConnected = false;    
      Serial.printf("[WSc] Webservice disconnected from sinric.com!\n");
      break;
    case WStype_CONNECTED: {
      isConnected = true;
      Serial.printf("[WSc] Service connected to sinric.com at url: %s\n", payload);
      Serial.printf("Waiting for commands from sinric.com ...\n");        
      }
      break;
    case WStype_TEXT: {
        Serial.printf("[WSc] get text: %s\n", payload);
        // Example payloads

        // For Light device type
        // {"deviceId": xxxx, "action": "setPowerState", value: "ON"} // https://developer.amazon.com/docs/device-apis/alexa-powercontroller.html
        // {"deviceId": xxxx, "action": "AdjustBrightness", value: 3} // https://developer.amazon.com/docs/device-apis/alexa-brightnesscontroller.html
        // {"deviceId": xxxx, "action": "setBrightness", value: 42} // https://developer.amazon.com/docs/device-apis/alexa-brightnesscontroller.html
        // {"deviceId": xxxx, "action": "SetColor", value: {"hue": 350.5,  "saturation": 0.7138, "brightness": 0.6501}} // https://developer.amazon.com/docs/device-apis/alexa-colorcontroller.html
        // {"deviceId": xxxx, "action": "DecreaseColorTemperature"} // https://developer.amazon.com/docs/device-apis/alexa-colortemperaturecontroller.html
        // {"deviceId": xxxx, "action": "IncreaseColorTemperature"} // https://developer.amazon.com/docs/device-apis/alexa-colortemperaturecontroller.html
        // {"deviceId": xxxx, "action": "SetColorTemperature", value: 2200} // https://developer.amazon.com/docs/device-apis/alexa-colortemperaturecontroller.html
        
#if ARDUINOJSON_VERSION_MAJOR == 5
        DynamicJsonBuffer jsonBuffer;
        JsonObject& json = jsonBuffer.parseObject((char*)payload);
#endif
#if ARDUINOJSON_VERSION_MAJOR == 6        
        DynamicJsonDocument json(1024);
        deserializeJson(json, (char*) payload);      
#endif        
        String deviceId = json ["deviceId"];     
        //String action = json ["action"];

      if(deviceId==dev_id)
      {  
        //if(digit=0);
        String action = json ["action"];               
        if(action == "setPowerState") 
        { // Switch or Light
            String value = json ["value"];
            if(value == "ON") 
            {   
                
                turnOn(deviceId);
                pixel_sts=1;
                
            } 
            else if(value == "OFF")
            {

                turnOff(deviceId);
                pixel_sts=0;
            }
        }
        else if(action == "SetBrightness") 
        {
          String brightness = json ["value"];
          Serial.println("Brightness set to: " + brightness);
          float overhall= intense;
          intense = brightness.toInt();
          brightness_trans(overhall);  
        }
        else if(action=="SetColorTemperature")
        {
          String value = json ["value"];
          int tempval= value.toInt();
          int dummy;
          
          //turnOff_rb(dev_rb);
          if(tempval==7000)//cool 
          {
            dummy=flag;
            flag=13;
            color_trans(dummy,flag,intense);
          }
          else if(tempval==5500)//daylight
          {
            dummy=flag;            
            flag=14;
            color_trans(dummy,flag,intense);
          }
          else if(tempval==4000)//white
          {
            dummy=flag;
            flag=15;
            color_trans(dummy,flag,intense);
          }
          else if(tempval==2700)//soft
          {
            dummy=flag;
            flag=16;
            color_trans(dummy,flag,intense);
          }
          else if(tempval==2200)//warm white
          {
            dummy=flag;
            flag=17;
            color_trans(dummy,flag,intense);
          }
          
        }
        else if(action == "SetColor")
        {
          JsonObject value = json ["value"];
          int dummy;
          int hue = value["hue"];
          float sat = value["saturation"];
          
          
          //turnOff_rb(dev_rb);       
          if((hue == 0))//red
          {
            dummy=flag;
            flag=1;
            color_trans(dummy,flag,intense); 
          }
          else if(hue ==120 )//green
          {  
            dummy=flag;       
            flag=2;
            color_trans(dummy,flag,intense);
            
          }
          else if(hue ==240 )//blue
          {
            dummy=flag;
            flag=3;
            color_trans(dummy,flag,intense);
          }
          else if(hue ==39 )//orange
          {
            dummy=flag;
            flag=4;
            color_trans(dummy,flag,intense);
          }
          
          
          else if(hue ==60 )//yellow 255 155 0
          {
            dummy=flag;
            flag=6;
            color_trans(dummy,flag,intense);
          }
          else if(hue ==180 )//cayn 50 213 245
          {
            dummy=flag;
            flag=7;
            color_trans(dummy,flag,intense);
          }
          else if(hue ==174 )//torquis 181 255 255
          {
            dummy=flag;
            flag=8;
            color_trans(dummy,flag,intense);
          }
          else if(hue ==197 )//skyblue 0 162 238
          {
            dummy=flag;
            flag=9;
            color_trans(dummy,flag,intense);
          }
          else if(hue ==277 )//purple 187,84,231
          {
            dummy=flag;
            flag=10;
            color_trans(dummy,flag,intense);
          }
          else if(hue ==348)//pink 254 184 198
          {
            dummy=flag;
            flag=11;
            color_trans(dummy,flag,intense);
          }
          else if(hue ==300 )//magenta 234 10 142
          {
            dummy=flag;
            flag=12;
            color_trans(dummy,flag,intense);
          }
          

        }
        else if (action == "test") {
            Serial.println("[WSc] received test command from sinric.com");
        }
      }
      else if(deviceId == dev_rb)
     {
        
        //turnOff(dev_id);
         String action = json ["action"];               
        
         if(action == "setPowerState")
          
            { // Switch or Light
               String value = json ["value"];
               if(value=="OFF")     
                  {
                    turnOff_rb(deviceId);
                    //turnOff(dev_id);
                    digit=0;
                  }
               else if(value=="ON")
                  {
                    if(pixel_sts==1)
                    turnOff(dev_id);
                    turnOn_rb(deviceId);
                    digit=1;
                    
                  }
           }
         else if(action == "SetBrightness") 
        {
          String brightness = json ["value"];
          Serial.println("Brightness set to: " + brightness);
          o_hall=intense_rainbow;
           intense_rainbow = brightness.toInt();
        }
               

        
     }
        
        
    
     
  }
      break;
    case WStype_BIN:
      Serial.printf("[WSc] get binary length: %u\n", length);
      break;
    default: break;
  }
}

void setup() {
  Serial.begin(115200);
  
  
  WiFiMulti.addAP(MySSID, MyWifiPassword);
  Serial.println();
  Serial.print("Connecting to Wifi: ");
  Serial.println(MySSID);  

  // Waiting for Wifi connect
  while(WiFiMulti.run() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  if(WiFiMulti.run() == WL_CONNECTED) {
    Serial.println("");
    Serial.print("WiFi connected. ");
    Serial.print("IP address: ");
    Serial.println(WiFi.localIP());
  }

  // server address, port and URL
  webSocket.begin("iot.sinric.com", 80, "/");

  // event handler
  webSocket.onEvent(webSocketEvent);
  webSocket.setAuthorization("apikey", MyApiKey);
  
  // try again every 5000ms if connection has failed
  webSocket.setReconnectInterval(5000);   // If you see 'class WebSocketsClient' has no member named 'setReconnectInterval' error update arduinoWebSockets
  pinMode(red,OUTPUT);
  pinMode(green,OUTPUT);
  pinMode(blue,OUTPUT);
  digitalWrite(red,HIGH);
  digitalWrite(green,HIGH);
  digitalWrite(blue,HIGH);
  
 
}

void loop() {
  
  webSocket.loop();
   
    if(digit==1)
    {
      rainbow(255,0,0);
    }
  
  
  
  
  
  if(isConnected) {
      uint64_t now = millis();
      
      // Send heartbeat in order to avoid disconnections during ISP resetting IPs over night. Thanks @MacSass
      if((now - heartbeatTimestamp) > HEARTBEAT_INTERVAL) {
          heartbeatTimestamp = now;
          webSocket.sendTXT("H");          
      }
  }   
}   
void rainbow(float i,float j,float k)
 {
  for(float x=0;x<=25500;x++)
      { 
        
        //delay(1);
        webSocket.loop();
        if(digit==1)
        {
          colors_rainbow(i,j,k,intense_rainbow);//i,0,k
          k=k+0.01;
          cr_=i,cg_=j,cb_=k;
          
        
        }
        else if(digit==0)
        break;
      } 
      
    
    for(float x=0;x<=25500;x++)
      {
        
        //delay(1);
        webSocket.loop();
        if(digit==1)
        {
          colors_rainbow(i,j,k,intense_rainbow);//;0,0,k
          i=i-0.01;
          cr_=i,cg_=j,cb_=k;
          
        }
        else if(digit==0)
        break;
      }
      
    
    for(float x=0;x<=25500;x++)
      {
        
        //delay(1);
        webSocket.loop();
        if(digit==1)
        {
          colors_rainbow(i,j,k,intense_rainbow);//0,j,k
         j=j+0.01; 
         cr_=i,cg_=j,cb_=k;
        
        }
        else if(digit==0)
       break;
      }
    
    for(float x=0;x<=25500;x++)
      {
        
        //delay(1);
        webSocket.loop();
        if(digit==1)
        {
           colors_rainbow(i,j,k,intense_rainbow);//0,j,0
          k=k-0.01;
          cr_=i,cg_=j,cb_=k;
          
        }
        else if(digit==0)
        break;
      }
     
    
    for(float x=0;x<=25500;x++)
      {
       
        //delay(1);
        webSocket.loop();
        if(digit==1)
        {
          colors_rainbow(i,j,k,intense_rainbow);//i,j,0
          i=i+0.01;
          cr_=i,cg_=j,cb_=k;
          
        }
        
        else if(digit==0)
        break;
      }
     
    
    for(float x=0;x<=25500;x++)
      {
        
        //delay(1);
        webSocket.loop();
        if(digit==1)
        {
          colors_rainbow(i,j,k,intense_rainbow);//i,0,0
           j=j-0.01; 
           cr_=i,cg_=j,cb_=k;
           
          
        }
        else if(digit==0)
       break;
      }
     
  
 }
